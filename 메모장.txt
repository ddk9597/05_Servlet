

내가 만든 웹 서비스의 배포 방식은 아래와 같이 진행함
 - 진행 방식
    1. Client -> Server 요청 : Request. req
    2. Server <- Client 응답 : Response. resp
    ++ Request가 없으면 Server는 움직이지 않음.

 - 필수 개념
    1. Server : 기능을 제공하는 컴퓨터
    2. Client : 기능을 요청하고 이용하는 고객 컴퓨터/기기
    3. IP와 Port 번호

        IP(Internet Protocol) 인터넷/네트워크를 통해 정보 송수신 방법 규약
            - 종류 : IPv4(123.123.123.123), IPv6
            - 기능 : 인터넷/네트워크에 연결된 컴퓨터나 장치를 구분함
            ++ 장치! 를 구분하는 주소

        Port 번호 : 컴퓨터 안의 여러 프로그램을 구분하는 식별 번호
            ++ 컴퓨터를 구분하는 번호가 아니라 컴퓨터 내의 프로그램을 구분하는 번호다!

        +++ IP + Port 번호를 알아야 다른 컴퓨터(서버)와 통신을 요청 할 수 있다.

Servlet : 웹 서비스를 위한 java 클래스
자바를 이용해 웹을 만들기 위해 필요한 기술

- 웹 프로그래밍에서 클라이언트의 요청을  처리하고
  그 결과를 다시 클라이언트에게 응답하는 Servlet 클래스의 구현 규칙을 지킨 자바 프로그래밍 기술
  ==> 자바로 구현된 CGI
  ++ CGI (Common Gateway Interface) : 별도로 제작된 웹 서버와 프로그램간의 교환 방식
    -> 어떤 프로그래밍 언어로도 구현 가능함
    -> 별도로 만든 프로그램에 HTML의 Get 또는 Post 방법으로 클라이언트의 데이터를 환경 변수로 전달
    -> 프로그램의 표준 출력 결과를 클라이언트에게 전송





Servlet 작성 순서
    1. HttpServlet 상속 받기
    
    2. 어노테이션 작성 @WebServlet("url패턴 지정");
        - 서블렛 클래스 등록 + 매핑
        - web.xml 없이 서블렛 설정 가능
        - 여러 url패턴 지정은 배열 형태로 지정 가능
            -> ("/ex1", "/ex2", ...);
    
    3. doGet || doPost 오버라이딩 -> 요청 메서드에 따라 수행함
        요청 메서드의 form 태그 내의 method속성에 지정된 값에 따라 수행함
        doGet : 전송된 데이터가 URL에 노출됨. 보안에 취약함
        doPost : HTTP요청의 body 태그 내에 데이터가 포함되어 전송됨.
                 doGet 보다 더 나은 보안.
                 주로 로그인, 회원가입 등 사용자 정보를 서버로 전송시 사용

    4. 필요한 로직 처리
        - 파라미터 얻어오기
        - 필요한 요청 처리 구문 작성
    
    5. 응답형태 지정 + 응답 스트림 얻어오기
        응답 형태 지정 : resp.setContentType("text/html; charset=utf-8");
        응답 스트림 얻어오기 :
            - PrintWriter out = resp.getWriter(); 
            - JSP 페이지 사용
    
    6. 스트림을 통해 응답 데이터 코드 출력하기(html)


JSP
-> Servlet 응답 화면 만들기 유용한 tool
Servlet -> JSP에게 요청 위임

메인페이지 요청 -> 주소"/"
 - "/" 요청을 처리하는 Servlet에서 JSP로 forward 해서 메인페이지 응답 화면을 만들어 클라이언트에게 응답


메인페이지 -> 로그인 -> 메인페이지 돌아가기(재요청)
 - 로그인 성공/실패 시
   결과 페이지를 원하는 것이 아니기 때문에 forward에서 응답 화면을 만들 필요가 없다!!

 -> 그런데 응답 없다면 흰 화면만 보임..

 -> 알맞은 화면을 보여주는 주소("/")를 요청함(== 재요청, Redirect)